#!/usr/bin/env python

from __future__ import print_function

import os, sys, argparse, glob, shutil
import numpy as np
import netCDF4 as nc

# Gitlab submodule
sys.path.append('common')
import utils

# local module
import replace_band_params as BANDS

class bandMerge:
  def __init__(self, inDict):
    """
    - Gather all netCDF files generated by angle_optimize.py 
      (should be 1 per band, and should follow 
       "rrtmgp-inputs-outputs_opt_ang_band??.nc" naming convention)
    - Fill a merged file with arrays that are common across bands 
      (gas optics, RTM specifications, etc.)
    - Calculate by-band fluxes and heating rates
    - Compress the diff_angle array so we have the optimized 
      diffusivity angle for reference

    Inputs
      inDict -- dictionary with the following keys:
        in_dir -- string, path with all necessary netCDF files 
        reference_nc -- string, RRTMGP broadband netCDF file that 
          will be used as a template
        outfile -- string, name of output netCDF that will contain 
          merged band fluxes, heating rates, and optimization angles
        mv -- boolean, move the new netCDF to the Jupyter notebook 
          directory for comparison with LBLRTM
        notebook_path -- string, move netCDF to this path if mv is set
    """

    self.inDir = inDict['in_dir']
    self.ncFiles = sorted(glob.glob('%s/*band??.nc' % self.inDir))
    self.nBands = len(self.ncFiles)

    if self.nBands == 0:
      print('Could not find any applicable netCDF files, returning')
      sys.exit(1)
    # endif no bands

    self.refNC = str(inDict['reference_nc'])
    self.outNC = str(inDict['outfile'])
    self.moveNC = inDict['mv']
    self.pathNB = inDict['notebook_path']

    # we'll be using the reference netCDF and adding to it, so let's 
    # not overwrite it
    shutil.copyfile(self.refNC, self.outNC)
  # end constructor

  def calcBands(self):
    """
    Pretty much just do the same thing as 
    replace_band_params.calcBands(), but with a separate object for 
    each band
    """

    # in this loop, i'm kind of assuming that we are working with 
    # 16 bands, or at least that self.nBands is consistent with all 
    # of the ncFiles band dimensions
    bandFluxUp, bandFluxDown, bandHR, diffAng = [], [], [], []
    for iBand, ncFile in enumerate(self.ncFiles):
      # copy the merged file into the Jupyter notebook data directory
      # so we can regenerate figures for the RRTMGP paper
      bandObj = BANDS.newRef({'reference_nc': self.outNC, \
        'optimized_nc': ncFile, 'mv': self.moveNC, \
        'notebook_path': self.pathNB})
      bandObj.extractVars()
      bandObj.calcBands()

      # save the calculations for a given band (over all lev/lay and
      # profiles)
      # if band has no optimized fluxes, just keep what we have
      # ad hoc: this only happened for upwelling
      if np.all(np.isnan(bandObj.upBand[:,:,iBand])):
        with nc.Dataset(self.refNC, 'r') as ncObj:
          bandFluxUp.append(\
            np.array(ncObj.variables['band_flux_up'][:,:,iBand]))
          bandFluxDown.append(\
            np.array(ncObj.variables['band_flux_dn'][:,:,iBand]))
          bandHR.append(\
            np.array(ncObj.variables['band_heating_rate'][:,:,iBand]))
        # endwith
        continue
      # endif NaN

      bandFluxUp.append(bandObj.upBand[:,:,iBand])
      bandFluxDown.append(bandObj.downBand[:,:,iBand])
      bandHR.append(bandObj.hrBand[:,:,iBand])

      # the diffusivity angle is the same across all g-points for a 
      # given profile, so we'll just grab one per profile per band
      diffAng.append(bandObj.diffAngle[0,:])
    # end ncFile (band) loop

    # go from nBand x nLev x nProf dimensions to the standard RRTMGP
    # convention of nLev x nProf x nBq
    axOrd = (1,2,0)
    bandFluxUp = np.transpose(np.array(bandFluxUp), axes=axOrd)
    bandFluxDown = np.transpose(np.array(bandFluxDown), axes=axOrd)
    bandHR = np.transpose(np.array(bandHR), axes=axOrd)

    # now overwrite the arrays in the most recent newRef object with 
    # the bandmerged results
    bandObj.downBand = np.array(bandFluxDown)
    bandObj.upBand = np.array(bandFluxUp)
    bandObj.netBand = bandObj.downBand - bandObj.upBand
    bandObj.hrBand = bandObj.heatFactor * bandHR / 86400

    # broadband integration
    bandObj.downBB = bandObj.downBand.sum(axis=2)
    bandObj.upBB = bandObj.upBand.sum(axis=2)
    bandObj.netBB = bandObj.netBand.sum(axis=2)
    bandObj.hrBB = bandObj.hrBand.sum(axis=2)

    # write merged results into output netCDF
    bandObj.fieldReplace()

    # let's keep the optimized diffusivity angle, now by band instead
    # of g-point
    with nc.Dataset(self.outNC, 'r+') as ncObj:
      # if the diffusivity angle already exists, we cannot overwrite 
      # it and everything is complete (but this should be the last 
      # thing we do in this method)
      if 'diff_angle_band' in ncObj.variables.keys(): return

      outVar = ncObj.createVariable(\
        'diff_angle_band', float, ('col', 'band'))
      outVar.units = 'Degrees'
      outVar.description = \
        'Optimized diffusivity angle for flux calculations'
      outVar[:] = np.array(diffAng).T
    # endwith
  # end calcBands()

# end bandMerge

if __name__ == '__main__':
  parser = argparse.ArgumentParser(\
    description='Combine the results from all bands processed ' + \
    'by angle_optimize.py.')
  parser.add_argument('--in_dir', '-d', type=str, \
    default='band_calculations/down', \
    help='Directory that contains all netCDF files to be merged.')
  parser.add_argument('--reference_nc', '-r', type=str, \
    default='rrtmgp-lw-inputs-outputs-default.nc', \
    help='RRTMGP broadband netCDF file that will be used as a ' + \
    'template.')
  parser.add_argument('--outfile', '-o', type=str, \
    default='rrtmgp-inputs-outputs_opt_ang_merged.nc', 
    help='Name of output netCDF that will contain merged band ' + \
    'fluxes, heating rates, and optimization angles.')
  parser.add_argument('--mv', '-mv', action='store_true', \
    help='Move the reference netCDF with newly-calculated ' + \
    'fluxes to the Jupyter notebook directory.')
  parser.add_argument('--notebook_path', '-n', type=str, \
    default='/rd47/scratch/RRTMGP/paper/' + \
    'rte-rrtmgp-paper-figures/data/' + \
    'rrtmgp-lw-inputs-outputs-optAng.nc', \
    help='Path to file in Jupyter notebook that compares ' + \
    'RRTMGP results to reference results. The new reference ' + \
    'file will be moved to this destination if --mv is set.')
  args = parser.parse_args()

  mObj = bandMerge(vars(args))
  mObj.calcBands()
# end main()
